; **************** BEGIN INITIALIZATION FOR ACL2s B MODE ****************** ;
; (Nothing to see here!  Your actual file is after this initialization code);

#|
Pete Manolios
Fri Jan 27 09:39:00 EST 2012
----------------------------

Made changes for spring 2012.


Pete Manolios
Thu Jan 27 18:53:33 EST 2011
----------------------------

The Beginner level is the next level after Bare Bones level.

|#

; Put CCG book first in order, since it seems this results in faster loading of this mode.
#+acl2s-startup (er-progn (assign fmt-error-msg "Problem loading the CCG book.~%Please choose \"Recertify ACL2s system books\" under the ACL2s menu and retry after successful recertification.") (value :invisible))
(include-book "ccg/ccg" :uncertified-okp nil :dir :acl2s-modes :ttags ((:ccg)) :load-compiled-file nil);v4.0 change

;Common base theory for all modes.
#+acl2s-startup (er-progn (assign fmt-error-msg "Problem loading ACL2s base theory book.~%Please choose \"Recertify ACL2s system books\" under the ACL2s menu and retry after successful recertification.") (value :invisible))
(include-book "base-theory" :dir :acl2s-modes)

#+acl2s-startup (er-progn (assign fmt-error-msg "Problem loading ACL2s customizations book.~%Please choose \"Recertify ACL2s system books\" under the ACL2s menu and retry after successful recertification.") (value :invisible))
(include-book "custom" :dir :acl2s-modes :uncertified-okp nil :ttags :all)

;Settings common to all ACL2s modes
(acl2s-common-settings)

#+acl2s-startup (er-progn (assign fmt-error-msg "Problem loading trace-star and evalable-ld-printing books.~%Please choose \"Recertify ACL2s system books\" under the ACL2s menu and retry after successful recertification.") (value :invisible))
(include-book "trace-star" :uncertified-okp nil :dir :acl2s-modes :ttags ((:acl2s-interaction)) :load-compiled-file nil)
(include-book "hacking/evalable-ld-printing" :uncertified-okp nil :dir :system :ttags ((:evalable-ld-printing)) :load-compiled-file nil)

#+acl2s-startup (er-progn (assign fmt-error-msg "Problem setting up ACL2s Beginner mode.") (value :invisible))
;Settings specific to ACL2s Beginner mode.
(acl2s-beginner-settings)

; why why why why 
(acl2::xdoc acl2s::defunc) ; almost 3 seconds

(cw "~@0Beginner mode loaded.~%~@1"
    #+acl2s-startup "${NoMoReSnIp}$~%" #-acl2s-startup ""
    #+acl2s-startup "${SnIpMeHeRe}$~%" #-acl2s-startup "")


(acl2::in-package "ACL2S B")

; ***************** END INITIALIZATION FOR ACL2s B MODE ******************* ;
;$ACL2s-SMode$;Beginner
; EX 01

; Define
; Rem : Nat Nat-{0} -> Nat
; (rem x y) returns the remainder of the integral division of x by y.

(defunc rem (x y)
  :input-contract (and (natp x) (natp y) (not (equal 0 y)))
  :output-contract (and (natp (rem x y)) (natp (/ (- x (rem x y)) y))
                        ;(implies (and (> x 0) (> y 1))(< (rem x y) x))
                        )
  (if (< x y)
    x
    (rem (- x y) y)))

(check= (rem 1 3) 1)
(check= (rem 0 4) 0)
(check= (rem 4 2) 0)

; Define
; Rotate-buffer-left : List-{0} Natp-{0} -> List
; Given: a non-empty list l and a positive natural number that less than
; l's length
; Returns: the given list after rotate left n times
;#|
;:program
;(acl2s-defaults :set testing-enabled nil)

(defunc Rotate-buffer-left-helper (l n)
  :input-contract (and (listp l) ;(not (endp l))
                       (natp n) (>= n 1)
                       (< n (len l)))
  :output-contract (listp (Rotate-buffer-left-helper l n))
  (cond
   ((equal 1 n) (app (rest l) (list (first l))))
   (t (Rotate-buffer-left-helper 
       (app (rest l) (list (first l)))
       (- n 1)))))

;|#

(check= (Rotate-buffer-left-helper 
         '(1 2 3 4 5 6) 3)
        '(4 5 6 1 2 3))#|ACL2s-ToDo-Line|#


; Define
; Rotate-buffer-left : List Nat -> List
; Returns: the given list after rotate left n times
(defunc Rotate-buffer-left (l n)
  :input-contract (and (listp l) (natp n))
  :output-contract (listp (Rotate-buffer-left l n))
  (cond
   ((or (equal n 0) (endp l) (equal (rem n (len l)) 0)) l)
   (t (Rotate-buffer-left-helper l (rem n (len l))))))
   
(check= (Rotate-buffer-left '() 3) '())
(check= (Rotate-buffer-left '(1 2 3) 2) '(3 1 2))
(check= (Rotate-buffer-left '(1 2 3) 100) '(2 3 1))